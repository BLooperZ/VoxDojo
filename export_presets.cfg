[preset.0]

name="Web"
platform="Web"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path="build/index.html"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=true
variant/thread_support=true
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script src=\"vendor/tf.min.js\"></script>
<script src=\"vendor/speech-commands.min.js\"></script>

<script type=\"text/javascript\">
    // more documentation available at
    // https://github.com/tensorflow/tfjs-models/tree/master/speech-commands

    // the link to your model provided by Teachable Machine export panel
    const modelURL = \"https://teachablemachine.withgoogle.com/models/nhVSTeJa7/\";

    async function createModel() {
        const checkpointURL = modelURL + \"model.json\"; // model topology
        const metadataURL = modelURL + \"metadata.json\"; // model metadata

        const recognizer = speechCommands.create(
            \"BROWSER_FFT\", // fourier transform type, not useful to change
            undefined, // speech commands vocabulary feature, not useful for your models
            checkpointURL,
            metadataURL,
        );

        // check that model and metadata are loaded via HTTPS requests.
        await recognizer.ensureModelLoaded();

        window.classLabels = {}; // object to hold class labels and their scores
    
        function stop() {
            recognizer.stopListening();
            console.log(\"Stopped listening.\");
        }

        async function start(duration) {
            const classLabels = recognizer.wordLabels(); // get class labels
    
            // listen() takes two arguments:
            // 1. A callback function that is invoked anytime a word is recognized.
            // 2. A configuration object with adjustable fields
            recognizer.listen(result => {
                const scores = result.scores; // probability of prediction for each class
                // render the probability scores per class
                for (let i = 0; i < classLabels.length; i++) {
                    window.classLabels[classLabels[i]] = result.scores[i];
                }
                console.log(window.classLabels); // log the class labels and their scores
                // Call the Godot callback with the results
                if (window.godotCallback) {
                    console.log(\"Sending results to Godot callback.\");
                    window.godotCallback(JSON.stringify(window.classLabels));
                } else {
                    console.log(\"No Godot callback set, results not sent to Godot.\");
                }
            }, {
                includeSpectrogram: true, // in case listen should return result.spectrogram
                probabilityThreshold: 0.2,
                invokeCallbackOnNoiseAndUnknown: true,
                overlapFactor: 0.5 // probably want between 0.5 and 0.75. More info in README
            });
    
            // Stop the recognition in 2 seconds.
            if (duration) {
                setTimeout(stop, duration * 1000);
            };
        }

        window.speechModel = {
            start: start,
            stop: stop,
        };
    }
</script>
"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=true
progressive_web_app/ensure_cross_origin_isolation_headers=true
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)
